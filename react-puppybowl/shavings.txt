Ternary for navigation:
selectedContact ? (
    <div>
      <h1>{selectedContact.name}</h1>
      <h3>Address: </h3>
      <p>{selectedContact.address.street}</p>
      <p>{selectedContact.address.suite}</p>
      <p>
        {selectedContact.address.city}, {selectedContact.address.zipcode}
      </p>
      <h4>Website: {selectedContact.website} </h4>
      <button
        onClick={() => {
          location.reload();
        }}
      >
        Back to List
      </button>
      {/* This button's actually just refreshing the pg., not going back. */}
    </div>
  ) : (
    <div>An issue occured with data procurement. Please inspect the console.</div>
  );


  Saving the original form state that won't update:
  export default function NewPlayerForm() {
  const [newPlayer, setNewPlayer] = useState({
    name: "",
    breed: "",
    image: "",
  });
  }

  function handleDelete() {
     deletePlayer(player.id);
  
  }

  async function handleDelete() {
    await deletePlayer(player.id);
    // location.reload();
   
  }

  In case the ternary fails:
  return (
    <div className="player-card">
      <h3>{player.name}</h3>
      <img src={player.imageUrl} alt={player.name} />
      <button>Player Details</button>
      <p>Player ID: {player.id} </p>
      <button onClick={handleDelete}>Delete</button>
    </div>
  );


<div>
  {results} ? (
    <div>
      SearchResults results={results} />
    </div>
    ): (<div>No Puppies were found with the name: {search} </div>)
</div>

{/* <div> 
            <div className="player-card">
              <h3>{foundPlayer.name}</h3>
              <img src={foundPlayer.imageUrl} alt={foundPlayer.name} />
              <p>Player ID: {foundPlayer.id} </p>
              <p>Breed: {foundPlayer.breed} </p>
              <p>Status: {foundPlayer.status} </p>
            </div>
      </div> */}

  Decided to go with a ternary over the logical conjunction:
  {results && <p>{<SearchResults results = {results}/>}</p>}


   async function getIDs() {
    selectedIDs = results.filter((puppy) => puppy.id);
    setSelectedIDs(selectedIDs)
  }
  const [selectedIDs, setSelectedIDs] = useState([])


    const puppyIds = results.map((puppy) => puppy.id);
        console.log (puppyIds)
Didn't need this route:
   {/* <Route path="/players/:id" element={<SinglePlayer />} /> */}
